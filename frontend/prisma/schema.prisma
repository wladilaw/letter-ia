generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  phone                 String?
  avatarUrl             String?  @map("avatar_url")
  location              String?
  role                  Role     @default(USER)
  subscriptionPlan      Plan     @default(FREE) @map("subscription_plan")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  lettersQuota          Int      @default(3) @map("letters_quota")
  lettersUsed           Int      @default(0) @map("letters_used")
  isVerified            Boolean  @default(false) @map("is_verified")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  profile       UserProfile?
  letters       Letter[]
  templates     Template[]
  applications  Application[]
  cvs           CV[]
  subscription  Subscription?
  payments      Payment[]
  aiUsage       AIUsage[]
  jobAlerts     JobAlert[]
  savedJobs     SavedJob[]
  companyFollows CompanyFollow[]
  reviews       Review[]
  letterFeedback LetterFeedback[]

  @@map("users")
}

model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  title            String?
  bio              String?
  experienceLevel  String?  @map("experience_level")
  skills           Json?
  languages        Json?
  careerObjectives String?  @map("career_objectives")
  preferences      Json?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Letter {
  id             String      @id @default(cuid())
  userId         String      @map("user_id")
  jobId          String?     @map("job_id")
  templateId     String?     @map("template_id")
  title          String
  content        String
  originalPrompt String      @map("original_prompt")
  metadata       Json?
  status         LetterStatus @default(DRAFT)
  tone           Tone        @default(PROFESSIONAL)
  wordCount      Int         @map("word_count")
  aiScore        Float?      @map("ai_score")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  job          Job?         @relation(fields: [jobId], references: [id])
  template     Template?    @relation(fields: [templateId], references: [id])
  applications Application[]
  feedback     LetterFeedback[]
  aiUsage      AIUsage[]

  @@map("letters")
}

model Template {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  title       String
  category    String
  content     String
  description String?
  variables   Json?
  isPublic    Boolean  @default(false) @map("is_public")
  isPremium   Boolean  @default(false) @map("is_premium")
  usageCount  Int      @default(0) @map("usage_count")
  rating      Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User?    @relation(fields: [userId], references: [id])
  letters Letter[]

  @@map("templates")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?  @map("logo_url")
  website     String?
  industry    String?
  size        String?
  location    String?
  socialLinks Json?    @map("social_links")
  rating      Float?
  reviewCount Int      @default(0) @map("review_count")
  isVerified  Boolean  @default(false) @map("is_verified")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  jobs           Job[]
  companyFollows CompanyFollow[]
  reviews        Review[]

  @@map("companies")
}

model Job {
  id             String      @id @default(cuid())
  companyId      String      @map("company_id")
  title          String
  description    String
  requirements   String?
  location       String?
  remoteType     String?     @map("remote_type")
  contractType   String?     @map("contract_type")
  salaryRange    String?     @map("salary_range")
  experienceLevel String?    @map("experience_level")
  benefits       Json?
  sourceUrl      String?     @map("source_url")
  status         JobStatus   @default(ACTIVE)
  postedAt       DateTime    @map("posted_at")
  expiresAt      DateTime?   @map("expires_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  company      Company       @relation(fields: [companyId], references: [id])
  applications Application[]
  savedJobs    SavedJob[]
  letters      Letter[]

  @@map("jobs")
}

model Application {
  id               String            @id @default(cuid())
  userId           String            @map("user_id")
  jobId            String            @map("job_id")
  letterId         String            @map("letter_id")
  cvId             String?           @map("cv_id")
  status           ApplicationStatus @default(PENDING)
  notes            String?
  appliedAt        DateTime          @map("applied_at")
  followedUpAt     DateTime?         @map("followed_up_at")
  interviewAt      DateTime?         @map("interview_at")
  interviewFeedback String?          @map("interview_feedback")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  job    Job    @relation(fields: [jobId], references: [id])
  letter Letter @relation(fields: [letterId], references: [id])
  cv     CV?    @relation(fields: [cvId], references: [id])

  @@map("applications")
}

model CV {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  title         String
  personalInfo  Json     @map("personal_info")
  experience    Json
  education     Json
  skills        Json
  certifications Json?
  projects      Json?
  template      String
  isDefault     Boolean  @default(false) @map("is_default")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("cvs")
}

model Subscription {
  id                    String           @id @default(cuid())
  userId                String           @unique @map("user_id")
  stripeSubscriptionId  String           @unique @map("stripe_subscription_id")
  stripeCustomerId      String           @map("stripe_customer_id")
  planType              Plan             @map("plan_type")
  status                SubscriptionStatus
  currentPeriodStart    DateTime         @map("current_period_start")
  currentPeriodEnd      DateTime         @map("current_period_end")
  canceledAt            DateTime?        @map("canceled_at")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  subscriptionId        String?  @map("subscription_id")
  stripePaymentIntentId String   @unique @map("stripe_payment_intent_id")
  amount                Decimal
  currency              String
  status                PaymentStatus
  description           String?
  createdAt             DateTime @default(now()) @map("created_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

model AIUsage {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  letterId    String?     @map("letter_id")
  serviceType ServiceType
  tokensUsed  Int         @map("tokens_used")
  cost        Decimal
  promptHash  String      @map("prompt_hash")
  createdAt   DateTime    @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  letter Letter? @relation(fields: [letterId], references: [id])

  @@map("ai_usage")
}

model JobAlert {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  criteria    Json
  isActive    Boolean  @default(true) @map("is_active")
  lastSentAt  DateTime? @map("last_sent_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_alerts")
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  jobId     String   @map("job_id")
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id])

  @@map("saved_jobs")
}

model CompanyFollow {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  companyId String   @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id])

  @@map("company_follows")
}

model Review {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  companyId   String      @map("company_id")
  rating      Int
  title       String
  content     String
  isAnonymous Boolean     @default(false) @map("is_anonymous")
  status      ReviewStatus @default(PENDING)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id])

  @@map("reviews")
}

model LetterFeedback {
  id          String   @id @default(cuid())
  letterId    String   @map("letter_id")
  userId      String   @map("user_id")
  rating      Int
  feedback    String
  improvements Json?
  createdAt   DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  letter Letter @relation(fields: [letterId], references: [id])

  @@map("letter_feedback")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  action      String
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  ipAddress   String   @map("ip_address")
  userAgent   String   @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PREMIUM
  PRO
  ENTERPRISE
}

enum LetterStatus {
  DRAFT
  COMPLETED
  ARCHIVED
}

enum Tone {
  PROFESSIONAL
  ENTHUSIASTIC
  FORMAL
  CREATIVE
  CASUAL
}

enum JobStatus {
  ACTIVE
  EXPIRED
  FILLED
  PAUSED
}

enum ApplicationStatus {
  PENDING
  APPLIED
  REVIEWING
  INTERVIEW
  REJECTED
  ACCEPTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum ServiceType {
  LETTER_GENERATION
  LETTER_IMPROVEMENT
  CV_GENERATION
  CV_IMPROVEMENT
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
} 